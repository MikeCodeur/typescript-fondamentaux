// DO NOT EDIT THIS FILE !!!
import React from 'react'


interface IQuestion {
  question: string
  options:string[]
  answer: string
}

interface IQCMInterface {
  exerciseId: string
  exerciseTitle : string
  quiz: IQuestion[]
}

const QCM: Array<IQCMInterface> = [
  {
    exerciseId: 'src/exercise/01.md',
    exerciseTitle: 'Les primitifs',
    quiz: [
      {
        question: "Lequel de ces types n'est pas un primitif",
        options: ["string", "date", "number", "boolean"],
        answer: "1"
      },
      {
        question: "L'inférence sert à ",
        options: ["compiler automatiquement", "detecter le type automatiquement", "analyser le code"],
        answer: "1"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/02.md',
    exerciseTitle: 'Arrays',
    quiz: [
      {
        question: "Est-ce correcte ? : const ages: number[] = ['23', 54, '13', 65]",
        options: ["Oui", "Non"],
        answer: "1"
      },
      {
        question: "Est ce correcte : const ages: string[] = ['23', '54', '13', '65']",
        options: ["Oui", "Non"],
        answer: "0"
      },
      {
        question: "Est ce correcte : const ages = [23, 54, 13, 65]",
        options: ["Oui", "Non"],
        answer: "0"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/03.md',
    exerciseTitle: 'Objects',
    quiz: [
      {
        question: "si : things = {game: 'fifa', age: 23, isOk: true} trouver l'erreur",
        options: ["things.game = 'pes'", "things.age = 43","things.name = 'pes'","things.isOk = false"],
        answer: "2"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/04.md',
    exerciseTitle: 'Type Aliases',
    quiz: [
      {
        question: "Peut-on créer plusieurs fois des Types Alias avec le même nom",
        options: ["Oui", "Non"],
        answer: "1"
      },
      {
        question: "Les Types Alias contiennent que des types primitifs",
        options: ["Vrai", "faux"],
        answer: "1"
      },
      {
        question: "Les Types Alias peuvent etre récursif",
        options: ["Vrai", "faux"],
        answer: "0"
      },
      {
        question: "Trouver l'erreur",
        options: ["type number_str = number | string", "type number_str = number | undefined"
        , "type number_str = number & string"],
        answer: "2"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/05.md',
    exerciseTitle: 'Literral Type',
    quiz: [
      {
        question: "Trouver l'erreur : si type okKo = 'ok' | 'ko'",
        options: ["variable = 'yes' ", "variable = 'ok' ", "variable = 'ko' "],
        answer: "0"
      },
      {
        question: "Un Enum peut s'autoincrementer ?",
        options: ["Vrai", "Faux"],
        answer: "0"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/06.md',
    exerciseTitle: 'Tuples',
    quiz: [
      {
        question: "Les Tuples contiennent des éléments du même type ",
        options: ["Vrai", "Faux"],
        answer: "1"
      },
      {
        question: "Les Tuples sont également des Arrays ",
        options: ["Vrai", "Faux"],
        answer: "0"
      },
      {
        question: "TypeScript empeche l'utilisation de 'push' sur les Tuples respecter le type du Tuple ? ",
        options: ["Vrai", "Faux"],
        answer: "1"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/07.md',
    exerciseTitle: 'Les opérateurs',
    quiz: [
      {
        question: "Comment rendre une propriété optionnelle ?",
        options: ["&", "!", "?", "|"],
        answer: "2"
      },
      {
        question: "Comment définir qu'une valeur ne sera pas null ?",
        options: ["&", "!", "?", "|"],
        answer: "1"
      },
      {
        question: "Le type never sert à",
        options: ["retourner une valeur void", "retourner une valeur null", "indiquer que la fonction ne sera jamais terminer", "A lever une exeption"],
        answer: "2"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/08.md',
    exerciseTitle: 'Function',
    quiz: [
      {
        question: "let fn: Function sert à",
        options: ["Créer une fonction", "spécifier que fn est une fonction"],
        answer: "1"
      },
      {
        question: "'let fn: (a: string, b: boolean) => number' trouver l'erreur ",
        options: ["fn('a','b')", "fn('a',true)"],
        answer: "0"
      }
    ],
  },
  {
    exerciseId: 'src/exercise/09.md',
    exerciseTitle: 'Interfaces',
    quiz: [
      {
        question: "Les interfaces peuvent s'utiliser comme des Types ?",
        options: ["Vrai", "Faux"],
        answer: "0"
      },
      {
        question: "Les interfaces Peuvent-etre redefinies plusieurs fois",
        options: ["Vrai", "Faux"],
        answer: "0"
      },
      {
        question: "Une classe ne peut implémenter qu'une interface ?",
        options: ["Vrai", "Faux"],
        answer: "1"
      },
      {
        question: "Les interfaces ne peuvent pas étendre une interface ?",
        options: ["Vrai", "Faux"],
        answer: "1"
      }
    ],
  },
]

//export default QCM;

const QcmComponent = () => {
  return (<>{ JSON.stringify(QCM, null, 2) }</>);
}
export default QcmComponent
